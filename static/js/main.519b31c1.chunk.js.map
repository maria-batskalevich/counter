{"version":3,"sources":["App.module.scss","Button.tsx","CounterSettings.tsx","CounterTable.tsx","bll/counterReducer.ts","App.tsx","bll/store.ts","utils/localstorage-utils.ts","index.tsx"],"names":["module","exports","Button","props","disabled","buttonDisabled","onClick","onClickHandler","className","s","button","buttonValue","CounterSettings","updateBothValuesHandler","setValues","app","tableWrapper","input","inputText","isError","inputError","inputLine","type","number","onChange","event","setNewMinValue","currentTarget","valueAsNumber","value","minValue","setNewMaxValue","maxValue","buttons","isCounting","CounterTable","counter","incValue","resetValue","textError","textDisabled","InitialState","setValueAC","isCountingAC","b","isErrorAC","App","useSelector","state","dispatch","useDispatch","appWrapper","newMinValue","minValueAC","newMaxValue","maxValueAC","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.519b31c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__Y4fic\",\"appWrapper\":\"App_appWrapper__3GPSn\",\"tableWrapper\":\"App_tableWrapper__2f2JM\",\"counter\":\"App_counter__3IL2P\",\"buttons\":\"App_buttons__2-yM6\",\"button\":\"App_button__3YFwj\",\"buttonDisabled\":\"App_buttonDisabled__3wEeQ\",\"input\":\"App_input__1DQ-x\",\"inputText\":\"App_inputText__3kDFh\",\"table\":\"App_table__2U-1p\",\"tableMax\":\"App_tableMax__3l5dM\",\"tableDisabled\":\"App_tableDisabled__3uUkw\",\"textDisabled\":\"App_textDisabled__jr3UJ\",\"textError\":\"App_textError__2N6wc\",\"inputError\":\"App_inputError__1oNl0\"};","import React from \"react\";\r\nimport s from './App.module.scss'\r\n\r\ntype ButtonPropsType = {\r\n    buttonValue: string;\r\n    buttonDisabled: boolean;\r\n    onClickHandler: () => void;\r\n};\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    return (\r\n        <button\r\n            disabled={props.buttonDisabled}\r\n            onClick={props.onClickHandler}\r\n            className={props.buttonDisabled ? s.buttonDisabled : s.button}\r\n        >\r\n            {props.buttonValue}\r\n        </button>\r\n    );\r\n}","import React, {ChangeEvent} from \"react\";\nimport {Button} from \"./Button\";\nimport s from './App.module.scss'\n\n\ntype CounterSettingsPropsType = {\n    minValue: number;\n    maxValue: number;\n    setNewMinValue: (newMinValue: number) => void;\n    setNewMaxValue: (newMaxValue: number) => void;\n    isCounting: boolean;\n    isError: boolean;\n    setValues: () => void;\n};\n\nexport function CounterSettings(props: CounterSettingsPropsType) {\n    const updateMaxValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        props.setNewMaxValue(event.currentTarget.valueAsNumber);\n    };\n    const updateMinValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        props.setNewMinValue(event.currentTarget.valueAsNumber);\n    };\n    const updateBothValuesHandler = () => {\n        props.setValues();\n    };\n\n    return (\n        <div className={s.app}>\n            <div className={s.tableWrapper}>\n                <div className={s.input}>\n\n                    <div>\n                        <span className={s.inputText}>min value: </span>\n                        <input\n                            className={props.isError ? s.inputError : s.inputLine}\n                            type={s.number}\n                            onChange={updateMinValueHandler}\n                            value={props.minValue}\n                        />\n                    </div>\n                    <div>\n                        <span className={s.inputText}>max value: </span>\n                        <input\n                            className={props.isError ? s.inputError : s.inputLine}\n                            type={\"number\"}\n                            onChange={updateMaxValueHandler}\n                            value={props.maxValue}\n                        />\n                    </div>\n                </div>\n                <div className={s.buttons}>\n                    {props.isCounting ? (\n                        <Button\n                            buttonValue={\"set\"}\n                            buttonDisabled={true}\n                            onClickHandler={updateBothValuesHandler}\n                        />\n                    ) : (\n                        <Button\n                            buttonValue={\"set\"}\n                            buttonDisabled={props.isError}\n                            onClickHandler={updateBothValuesHandler}\n                        />\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\nimport {Button} from \"./Button\";\nimport s from './App.module.scss'\n\n\ntype CounterTableauPropsType = {\n    value: number;\n    maxValue: number;\n    minValue: number;\n    incValue: () => void;\n    resetValue: () => void;\n    isCounting: boolean;\n    isError: boolean;\n};\n\nexport function CounterTable(props: CounterTableauPropsType) {\n    return (\n        <div className={s.app}>\n            <div className={s.tableWrapper}>\n                {props.isCounting ? (\n                    <>\n                        <div className={s.counter}>{props.value}</div>\n                        <div className={s.buttons}>\n                            <Button\n                                buttonValue={\"inc\"}\n                                onClickHandler={props.incValue}\n                                buttonDisabled={props.value === props.maxValue}\n                            />\n                            <Button\n                                buttonValue={\"reset\"}\n                                onClickHandler={props.resetValue}\n                                buttonDisabled={props.value === props.minValue}\n                            />\n                        </div>\n\n\n                    </>\n                ) : (\n                    <>\n                        <div className={s.counter}>\n            <span className={props.isError ? s.textError : s.textDisabled}>\n              {props.isError\n                  ? \"Incorrect value!\"\n                  : `Enter values and press \"set\"`}\n            </span>\n                        </div>\n                        <div className={s.buttons}>\n\n                            <Button\n                                buttonValue={\"inc\"}\n                                onClickHandler={props.incValue}\n                                buttonDisabled={true}\n                            />\n\n\n                            <Button\n                                buttonValue={\"reset\"}\n                                onClickHandler={props.resetValue}\n                                buttonDisabled={true}\n                            />\n                        </div>\n\n                    </>\n                )}\n            </div>\n\n        </div>\n    );\n}","const InitialState = {\r\n    value: 0,\r\n    minValue: 0,\r\n    maxValue: 5,\r\n    isCounting: true,\r\n    isError: false\r\n}\r\ntype InitialStateType = {\r\n    value: number;\r\n    minValue: number;\r\n    maxValue: number;\r\n    isCounting: boolean;\r\n    isError: boolean\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateType = InitialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"INC-VALUE\":{\r\n            return {\r\n                ...state, value: state.value+1\r\n            }\r\n        }\r\n        case \"SET-VALUE\": {\r\n            return {\r\n                ...state,\r\n                value: action.value\r\n            }\r\n        }\r\n        case \"MIN-VALUE\": {\r\n            return {\r\n                ...state,\r\n                minValue: action.newMinValue\r\n            }\r\n        }\r\n        case \"MAX-VALUE\": {\r\n            return {\r\n                ...state,\r\n                maxValue: action.newMaxValue\r\n            }\r\n        }\r\n        case \"IS-COUNTING\":{\r\n            return {\r\n                ...state,\r\n                isCounting: action.b\r\n            }\r\n        }\r\n        case \"IS-ERROR\":{\r\n            return {\r\n                ...state,\r\n                isError: action.b\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionTypes = SetValueACType | MinValueACType | MaxValueACType | isCountingACType | isErrorACType | incValueType\r\ntype SetValueACType = ReturnType<typeof setValueAC>\r\ntype incValueType = ReturnType<typeof incValueAC>\r\ntype MinValueACType = ReturnType<typeof minValueAC>\r\ntype MaxValueACType = ReturnType<typeof maxValueAC>\r\ntype isCountingACType = ReturnType<typeof isCountingAC>\r\ntype isErrorACType = ReturnType<typeof isErrorAC>\r\nexport const incValueAC = () => ({type: 'INC-VALUE'} as const)\r\nexport const setValueAC = (value: number) => ({ type: 'SET-VALUE', value} as const)\r\nexport const minValueAC = (newMinValue: number) => ({type: 'MIN-VALUE', newMinValue} as const)\r\nexport const maxValueAC = (newMaxValue: number) => ({type: 'MAX-VALUE',newMaxValue} as const)\r\nexport const isCountingAC = (b: boolean) => ({type: 'IS-COUNTING', b} as const)\r\nexport const isErrorAC = (b: boolean) => ({type: 'IS-ERROR', b} as const)\r\n","import React from \"react\";\nimport s from \"./App.module.scss\";\nimport {CounterSettings} from \"./CounterSettings\";\nimport {CounterTable} from \"./CounterTable\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./bll/store\";\nimport {incValueAC, isCountingAC, isErrorAC, maxValueAC, minValueAC, setValueAC} from \"./bll/counterReducer\";\n\nexport const App = () => {\n    const value = useSelector<AppStateType, number>(state => state.counter.value)\n    const minValue = useSelector<AppStateType, number>(state => state.counter.minValue)\n    const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\n    const isCounting = useSelector<AppStateType, boolean>(state => state.counter.isCounting)\n    const isError = useSelector<AppStateType, boolean>(state => state.counter.isError)\n    const dispatch = useDispatch()\n\n    const incValue = () => {\n        if (value <= maxValue) {\n            dispatch(incValueAC())\n        }\n    };\n    const resetValue = () => {\n        dispatch(setValueAC(0))\n    }\n\n    const setNewMaxValue = (newMaxValue: number) => {\n        dispatch(isCountingAC(false))\n\n        if (newMaxValue < 1 || newMaxValue <= minValue) {\n            dispatch(isErrorAC(true));\n        } else if (newMaxValue >= 1 && newMaxValue > minValue) {\n            dispatch(isErrorAC(false));\n            dispatch(maxValueAC(newMaxValue))\n        }\n    };\n\n    const setNewMinValue = (newMinValue: number) => {\n        dispatch(isCountingAC(false))\n\n        if (newMinValue < 0 || maxValue <= newMinValue) {\n            dispatch(isErrorAC(true));\n        } else if (newMinValue >= 0 && maxValue > newMinValue) {\n            dispatch(isErrorAC(false));\n            dispatch(minValueAC(newMinValue))\n        }\n    };\n\n    const setValues = () => {\n        dispatch(isCountingAC(true))\n        dispatch(setValueAC(minValue));\n    };\n\n    return (\n        <div className={s.appWrapper}>\n            <CounterSettings\n                maxValue={maxValue}\n                minValue={minValue}\n                setNewMinValue={setNewMinValue}\n                setNewMaxValue={setNewMaxValue}\n                isCounting={isCounting}\n                isError={isError}\n                setValues={setValues}\n            />\n            <CounterTable\n                value={value}\n                maxValue={maxValue}\n                minValue={minValue}\n                incValue={incValue}\n                resetValue={resetValue}\n                isCounting={isCounting}\n                isError={isError}\n            />\n        </div>\n    );\n\n\n};","import {counterReducer} from \"./counterReducer\";\r\nimport {combineReducers, legacy_createStore as createStore } from 'redux';\r\nimport {loadState, saveState} from \"../utils/localstorage-utils\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    });\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n","import {AppStateType} from \"../bll/store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {App} from \"./App\";\nimport \"./index.css\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}><App/></Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}