{"version":3,"sources":["Button.tsx","CounterSettings.tsx","CounterTable.tsx","App.tsx","index.tsx"],"names":["Button","props","disabled","buttonDisabled","onClick","onClickHandler","className","buttonValue","CounterSettings","updateBothValuesHandler","setValues","isError","type","onChange","event","setNewMinValue","currentTarget","valueAsNumber","value","minValue","setNewMaxValue","maxValue","isCounting","CounterTable","incValue","resetValue","App","useState","setIsError","setIsCounting","setMinValue","setMaxValue","setValue","useEffect","getFromLocalStorage","setToLocalStorage","localStorage","setItem","JSON","stringify","minValueAsString","getItem","maxValueAsString","parse","newMinValue","newMaxValue","prev","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae3fc1c0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\ntype ButtonPropsType = {\r\n    buttonValue: string;\r\n    buttonDisabled: boolean;\r\n    onClickHandler: () => void;\r\n};\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    return (\r\n        <button\r\n            disabled={props.buttonDisabled}\r\n            onClick={props.onClickHandler}\r\n            className={props.buttonDisabled ? \"button-disabled\" : \"button\"}\r\n        >\r\n            {props.buttonValue}\r\n        </button>\r\n    );\r\n}","import React, {ChangeEvent} from \"react\";\nimport {Button} from \"./Button\";\n\n\ntype CounterSettingsPropsType = {\n    minValue: number;\n    maxValue: number;\n    setNewMinValue: (newMinValue: number) => void;\n    setNewMaxValue: (newMaxValue: number) => void;\n    isCounting: boolean;\n    isError: boolean;\n    setValues: () => void;\n};\n\nexport function CounterSettings(props: CounterSettingsPropsType) {\n    const updateMaxValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        props.setNewMaxValue(event.currentTarget.valueAsNumber);\n    };\n    const updateMinValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        props.setNewMinValue(event.currentTarget.valueAsNumber);\n    };\n    const updateBothValuesHandler = () => {\n        props.setValues();\n    };\n\n    return (\n        <div className={\"app\"}>\n            <div className={'tableWrapper'}>\n                <div className={'input'}>\n                    <div>\n                        <span className={\"inputText\"}>min value: </span>\n                        <input\n                            className={props.isError ? \"input-error\" : \"input-line\"}\n                            type={\"number\"}\n                            onChange={updateMinValueHandler}\n                            value={props.minValue}\n                        />\n                    </div>\n                    <div>\n                        <span className={\"inputText\"}>max value: </span>\n                        <input\n                            className={props.isError ? \"input-error\" : \"input-line\"}\n                            type={\"number\"}\n                            onChange={updateMaxValueHandler}\n                            value={props.maxValue}\n                        />\n                    </div>\n                </div>\n                <div className={'buttons'}>\n                    {props.isCounting ? (\n                        <Button\n                            buttonValue={\"set\"}\n                            buttonDisabled={true}\n                            onClickHandler={updateBothValuesHandler}\n                        />\n                    ) : (\n                        <Button\n                            buttonValue={\"set\"}\n                            buttonDisabled={props.isError}\n                            onClickHandler={updateBothValuesHandler}\n                        />\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\nimport {Button} from \"./Button\";\n\n\ntype CounterTableauPropsType = {\n    value: number;\n    maxValue: number;\n    minValue: number;\n    incValue: () => void;\n    resetValue: () => void;\n    isCounting: boolean;\n    isError: boolean;\n};\n\nexport function CounterTable(props: CounterTableauPropsType) {\n    const tableauClassName =\n        props.value === props.maxValue ? \"table-max\" : \"table\";\n\n    return (\n        <div className={\"app\"}>\n            <div className={'tableWrapper tableClassName'}>\n                {props.isCounting ? (\n                    <>\n                        <div className={'counter'}>{props.value}</div>\n                        <div className={'buttons'}>\n                            <Button\n                                buttonValue={\"inc\"}\n                                onClickHandler={props.incValue}\n                                buttonDisabled={props.value === props.maxValue}\n                            />\n                            <Button\n                                buttonValue={\"reset\"}\n                                onClickHandler={props.resetValue}\n                                buttonDisabled={props.value === props.minValue}\n                            />\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        <div className={'counter'}>\n            <span className={props.isError ? \"text-error\" : \"text-disabled\"}>\n              {props.isError\n                  ? \"Incorrect value!\"\n                  : `Enter values and press \"set\"`}\n            </span>\n                        </div>\n                        <div className={'buttons'}>\n\n                            <Button\n                                buttonValue={\"inc\"}\n                                onClickHandler={props.incValue}\n                                buttonDisabled={true}\n                            />\n\n\n                            <Button\n                                buttonValue={\"reset\"}\n                                onClickHandler={props.resetValue}\n                                buttonDisabled={true}\n                            />\n                        </div>\n\n                    </>\n                )}\n            </div>\n\n        </div>\n    );\n}","import React, {useEffect, useState} from \"react\";\nimport \"./App.css\";\nimport {CounterSettings} from \"./CounterSettings\";\nimport {CounterTable} from \"./CounterTable\";\n\nexport const App = () => {\n    const [isError, setIsError] = useState<boolean>(false);\n    const [isCounting, setIsCounting] = useState<boolean>(false);\n    const [minValue, setMinValue] = useState<number>(0);\n    const [maxValue, setMaxValue] = useState<number>(5);\n    const [value, setValue] = useState<number>(minValue);\n\n\n    useEffect(() => {\n        getFromLocalStorage();\n        setValue(minValue);\n    }, []);\n\n    const setNewMaxValue = (newMaxValue: number) => {\n        setIsCounting(false);\n\n        if (newMaxValue < 1 || newMaxValue <= minValue) {\n            setIsError(true);\n        } else if (newMaxValue >= 1 && newMaxValue > minValue) {\n            setIsError(false);\n            setMaxValue(newMaxValue);\n        }\n    };\n\n    const setNewMinValue = (newMinValue: number) => {\n        setIsCounting(false);\n\n        if (newMinValue < 0 || maxValue <= newMinValue) {\n            setIsError(true);\n        } else if (newMinValue >= 0 && maxValue > newMinValue) {\n            setIsError(false);\n            setMinValue(newMinValue);\n        }\n    };\n\n    const setValues = () => {\n        setToLocalStorage();\n        setIsCounting(true);\n        setValue(minValue);\n    };\n\n    const setToLocalStorage = () => {\n        localStorage.setItem(\"minValue\", JSON.stringify(minValue));\n        localStorage.setItem(\"maxValue\", JSON.stringify(maxValue));\n    };\n\n    const getFromLocalStorage = () => {\n        const minValueAsString = localStorage.getItem(\"minValue\");\n        const maxValueAsString = localStorage.getItem(\"maxValue\");\n        if (minValueAsString) {\n            setMinValue(JSON.parse(minValueAsString));\n        }\n        if (maxValueAsString) {\n            setMaxValue(JSON.parse(maxValueAsString));\n        }\n    };\n\n    const incValue = () => {\n        if (value <= maxValue) {\n            setValue((prev) => prev + 1);\n        }\n    };\n    const resetValue = () => {\n        setValue(minValue);\n    };\n\n    return (\n        <div className={'appWrapper'}>\n            <CounterSettings\n                maxValue={maxValue}\n                minValue={minValue}\n                setNewMinValue={setNewMinValue}\n                setNewMaxValue={setNewMaxValue}\n                isCounting={isCounting}\n                isError={isError}\n                setValues={setValues}\n            />\n            <CounterTable\n                value={value}\n                maxValue={maxValue}\n                minValue={minValue}\n                incValue={incValue}\n                resetValue={resetValue}\n                isCounting={isCounting}\n                isError={isError}\n            />\n        </div>\n    );\n\n\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {App} from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}